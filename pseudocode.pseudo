// Pseudocode for OneOrZero, a logic gate simulator
import pygame

WIDTH, HEIGHT = 1280, 720
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("OneOrZero")
WHITE = (255, 255, 255)

FPS = 60

AND_GATE = pygame.image.load("AND_GATE.png")
OR_GATE = pygame.image.load("OR_GATE.png")
NOT_GATE = pyame.image.load("NOT_GATE.png")
NAND_GATE = pygame.image.load("NAND_GATE.png")
NOR_GATE = pygame.image.load("NOR_GATE.png")
XOR_GATE = pygame.image.load("XOR_GATE.png")

SWITCH = pygame.image.load("SWITCH.png")


/* LOGIC GATES
-----------------------------------------------------------------
*/

class LogicGate {
    constructor(self, gateType) {
        self.gateType = gateType
        self.output = 0
    }

    function getOutput(self) {
        self.output = self.performLogic()
        return self.output
    }

    function drawGate(param) {
        
    }
}

class BinaryGate(LogicGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
        self.inputA = 0
        self.inputB = 0
    }

    function getInputA(self, Socket) {
        self.inputA = socket.getState("A")
        return self.inputA
    }

    function getInputB(self, Socket) {
        self.inputB = socket.getState("B")
        return self.inputB
    }
}

class UnaryGate(LogicGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
        self.inputA = 0
    }

    function getInput(self) {
        self.inputA = socketState(socketA)
    }
}

class ANDGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 1) and (self.getInputB() == 1) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class ORGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 1) or (self.getInputB() == 1) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class NOTGate(UnaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 0) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class NORGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 0) and (self.getInputB() == 0) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class NANDGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 1) and (self.getInputB() == 1) {
            self.output = 0
        } else {
            self.output = 1
        }
        return self.output
    } 
}

class XORGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if ((self.getInputA() == 1) and (self.getInputA() == 0)) or 
        ((self.getInputA() == 0) and (self.getInputA() == 1)) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

/* SIDEBAR MENU
-----------------------------------------------------------------
*/

class SidebarMenu():
    constructor() {
        andInstance = new ANDGate(AND_GATE)
        orInstance = new ORGate(OR_GATE)
        notInstance = new NOTGate(NOT_GATE)
        nandInstance = new NANDGate(NAND_GATE)
        norInstance = new NORGate(NOR_GATE)
        xorInstance = new XORGate(XOR_GATE)

        switchInstance = new Switch(SWITCH)
    }

    componentsList = [andInstance, orInstance, notInstace,
    nandInstance, norInstance, xorInstance, switchInstance]
    // Y-value of each component
    coordinatesDictionary = {"andInstance" : 0, "orInstance" : 60,
     "notInstance" : 120, "nandInstance": 180, "norInstance" : 240, 
     "nandInstance" : 300, "xorInstance" : 360, "switchInstance" : 420}
    // Displays the gates in the sidebar menu, in a 1x6 grid
    function showGates(self) {
        for item in componentsList:
            coordinates = coordinatesDictionary[str(item)]
            WIN.blit(item, coordinates)
            // Makes sure that the next compenent is shown below the previous
            coordinates[1] = coordinates[1] + 60
        pygame.display.update()
    }
    // This function makes sure that another copy of the gate appears
    // when a gate is drag-and-dropped from the sidebar menu.
    function infiniteGates(param) {
        
    }

/* GAME CLASS
-----------------------------------------------------------------
*/
class Game():
    constructor() {
        pygame.init()
    }

function main() {
    WIN.fill(WHITE)
    pygame.display.update()

    function dragAndDrop() {
        
    }
    
}

// Creates buttons for all logic gates
ANDGate = Button(pygame.image.load("andgate.png"))
ANDGate.rect.x = 50
ANDGate.rect.y = 20

main()