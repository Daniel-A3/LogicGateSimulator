// Pseudocode for OneOrZero, a logic gate simulator
import pygame
import sqlite3
import json

WIDTH, HEIGHT = 1280, 720
WIN = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("OneOrZero")
WHITE = (255, 255, 255)

FPS = 60

AND_GATE = pygame.image.load("AND_GATE.png")
OR_GATE = pygame.image.load("OR_GATE.png")
NOT_GATE = pyame.image.load("NOT_GATE.png")
NAND_GATE = pygame.image.load("NAND_GATE.png")
NOR_GATE = pygame.image.load("NOR_GATE.png")
XOR_GATE = pygame.image.load("XOR_GATE.png")

SWITCH = pygame.image.load("SWITCH.png")


/* LOGIC GATES
-----------------------------------------------------------------
*/

class LogicGate {
    constructor(self, gateType) {
        self.gateType = gateType
        self.output = 0
    }

    function getOutput(self) {
        self.output = self.performLogic()
        return self.output
    }

    function drawGate(self, surface) {
        surface.blit(self.image, (self.x, self.y))
    }
}

class BinaryGate(LogicGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
        self.inputA = 0
        self.inputB = 0
    }

    function getInputA(self, Socket) {
        self.inputA = socket.getState("A")
        return self.inputA
    }

    function getInputB(self, Socket) {
        self.inputB = socket.getState("B")
        return self.inputB
    }
}

class UnaryGate(LogicGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
        self.inputA = 0
    }

    function getInput(self) {
        self.inputA = socketState(socketA)
    }
}

class ANDGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 1) and (self.getInputB() == 1) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class ORGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 1) or (self.getInputB() == 1) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class NOTGate(UnaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 0) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class NORGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 0) and (self.getInputB() == 0) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

class NANDGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if (self.getInputA() == 1) and (self.getInputB() == 1) {
            self.output = 0
        } else {
            self.output = 1
        }
        return self.output
    } 
}

class XORGate(BinaryGate) {
    constructor(self, gateType) {
        super().constructor(gateType)
    }

    function performLogic(self) {
        if ((self.getInputA() == 1) and (self.getInputA() == 0)) or 
        ((self.getInputA() == 0) and (self.getInputA() == 1)) {
            self.output = 1
        } else {
            self.output = 0
        }
        return self.output
    } 
}

/* SWITCH CLASS
-----------------------------------------------------------------
*/
// Switch component that allows you to turn current on or off
class Switch {
    constructor(param) {
        def __init__(self, screen, x, y, size=40, color=(255, 255, 255)):
        self.screen = screen
        self.x = x
        self.y = y
        self.size = size
        self.color = color
        self.value = False
        self.rect = pygame.Rect(self.x, self.y, self.size, self.size)
    }
    function draw(self){
        pygame.draw.rect(self.screen, self.color, self.rect)
        if self.value:
            pygame.draw.circle(self.screen, (0, 255, 0), self.rect.center, self.size)
    }
    function update(self, event){
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(event.pos):
                self.value = not self.value
        }
}

/* SIDEBAR MENU
-----------------------------------------------------------------
*/

class SidebarMenu {
    constructor(self,screen, width, height) {
        self.screen = screen
        self.width = width
        self.height = height

        andInstance = new ANDGate(AND_GATE)
        orInstance = new ORGate(OR_GATE)
        notInstance = new NOTGate(NOT_GATE)
        nandInstance = new NANDGate(NAND_GATE)
        norInstance = new NORGate(NOR_GATE)
        xorInstance = new XORGate(XOR_GATE)

        switchInstance = new Switch(SWITCH)
    }

    componentsList = [andInstance, orInstance, notInstace,
    nandInstance, norInstance, xorInstance, switchInstance]
    // Y-value of each component
    coordinatesDictionary = {"andInstance" : 0, "orInstance" : 60,
     "notInstance" : 120, "nandInstance": 180, "norInstance" : 240, 
     "nandInstance" : 300, "xorInstance" : 360, "switchInstance" : 420}
    // Displays the gates in the sidebar menu, in a 1x6 grid
    procedure draw(self) {
        pygame.draw.rect(self.screen, (192, 192, 192), pygame.Rect(0, 0, self.width, self.height))
        for item in componentsList:
            coordinates = coordinatesDictionary[str(item)]
            WIN.blit(item, coordinates)
    }
    // This function checks that a logic gate is clicked.
    function buttonClicked(self) {
        for button in componentsList:
            if coordinatesDictionary[button].collidepoint(pos):
                // If a component is dragged, a new one spawns in its place.
                drawGates(self)
                return True
        return None
    }
}

/* SOCKET CLASS
-----------------------------------------------------------------
*/

class Socket {
    constructor(self,screen, x, y, input = False) {
        self.screen = screen
        self.x = x
        self.y = y
        self.radius = 10
        self.color = (255, 255, 255)
        self.input = input
        self.clicked = False
    }

    procedure draw(self) {
        pygame.draw.circle(self.screen, self.color, (self.x, self.y), self.radius)
        if self.input == True:
            pygame.draw.circle(self.screen, (0, 0, 0), (self.x, self.y), self.radius-2)
    }
    // Checks collision
    procedure handleEvent(self, event) {
        if event.type == pygame.MOUSEBUTTONUP:
            pos = pygame.mouse.getPos()
            if (pos[0] - self.x)**2 + (pos[1] - self.y)**2 <= self.radius**2:
                self.clicked = True
    }
}

/* WIRE CLASS
-----------------------------------------------------------------
*/

class Wire {
    constructor(self, screen, socket1, socket2):
        self.screen = screen
        self.socket1 = socket1
        self.socket2 = socket2
        self.color = (255, 255, 255)
        self.width = 2

    function draw(self){
        pygame.draw.line(self.screen, self.color, (self.socket1.x, self.socket1.y), (self.socket2.x, self.socket2.y), self.width)
    }
    function update(self){
        self.draw()
    }
}

/* BIN CLASS
-----------------------------------------------------------------
*/
// If a component is drag and dropped onto the bin, it is deleted.  
class Bin {
    function constructor(self, screen, x, y, size=40, color=(255, 255, 255)){
        self.screen = screen
        self.x = x
        self.y = y
        self.size = size
        self.image = pygame.image.load('bin.png').convert_alpha()
        self.rect = pygame.Rect(self.x, self.y, self.size, self.size)
    }
    function draw(self){
        self.screen.blit(pygame.transform.scale(self.image, (self.size, self.size)), self.rect)
    }
    function update(self, components){
        for component in components:
            if self.rect.colliderect(component.rect):
                components.remove(component)
    }
}

/* INFORMATION MENU CLASS
-----------------------------------------------------------------
*/
// Displays useful information for each component
class InformationMenu {
    function constructor(self, screen, x, y, size=40, color=(255, 255, 255)){
        self.screen = screen
        self.image = pygame.image.load(image_path)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y
        self.info_screen = pygame.Surface((400, 300))
        self.info_screen.fill((255, 255, 255))
        self.info_screen_rect = self.info_screen.get_rect(center=self.screen.get_rect().center)
        self.info_font = pygame.font.SysFont('Arial', 18)
    }
    function draw(self){
        self.screen.blit(self.image, self.rect)
    }
    function handleEvent(self, event, gates){
        if event.type == pygame.MOUSEBUTTONDOWN and event.button == 1:
            if self.rect.collidepoint(event.pos):
                self.show_info(gates)
    }
    function showMenu(self, gates){
        self.info_screen.fill((255, 255, 255))
        info = ""
        for gate in gates:
            info = info + (gate.name + gate.info)
        info_text = self.info_font.render(info, True, (0, 0, 0))
        self.info_screen.blit(info_text, (10, 10))
        pygame.draw.rect(self.info_screen, (0, 0, 0), self.info_screen.get_rect(), 2)
        self.screen.blit(self.info_screen, self.info_screen_rect)
    }
}

/* SAVE AND LOAD CIRCUITS - DATABASE CLASS
-----------------------------------------------------------------
*/
// Dictionary template for the circuit configuration
circuit_config = {
    "components": [
        {
            "type": "",
            "position": [],
            "inputs": [
                {"socketId": 1, "connectedTo": },
                {"socketId": 2, "connectedTo": }
            ],
            "outputs": [{"socketId": 3, "connectedTo": None}]
        },
    ],
    "wires": [
        {"start_socket": 1, "end_socket": 2},
    ]
}  

class Database {
    function constructor(self, DBname){
        self.DBname = DBname
        self.connection = sqlite3.connect(DBname)
        self.cursor = self.connection.cursor()
        self.create_table()
    }

    function createTable(self){
        self.cursor.execute("CREATE TABLE IF NOT EXISTS circuits
                            (id INTEGER PRIMARY KEY AUTOINCREMENT,
                            name TEXT NOT NULL,
                            config TEXT NOT NULL);")
        self.connection.commit()
    }

    function saveCircuit(self, name, circuitConfig){
        // Convert circuit configuration to JSON
        jsonData = json.dumps(circuitConfig)
        
        // Save JSON data to database
        self.cursor.execute("INSERT INTO circuits (name, config) VALUES (?, ?)",
                             (name, jsonData))
        self.connection.commit()
    }

    function loadCircuit(self, name){
        // Load JSON data from database
        self.cursor.execute("SELECT config FROM circuits WHERE name=?", (name,))
        row = self.cursor.fetchone()
        if row:
            jsonData = row[0]
            
            // Parse JSON data into Python dictionary
            circuitConfig = json.loads(jsonData)
            
            return circuitConfig
        else:
            return None
    }
}
function dragAndDrop() {
    if event.type == pygame.MOUSEBUTTONDOWN:
        if event.button == 1:
            if SidebarMenu.buttonClicked(self) == True:
                dragging = True
                mouseX = event.pos
                mouseY = event.pos
                offsetX = self.x - mouseX
                offsetY = self.y - mouseY
                return offsetX, offsetY

    else if event.type == pygame.MOUSEMOTION:
        if dragging == True:
            mouseX = event.pos
            mouseY = event.pos
            offsetX = self.x + mouseX
            offsetY = self.y + mouseY
            return offsetX, offsetY
    else:
        return None
}

running = True

function main() {

    pygame.init()
    pygame.display.set_caption("Logic Gate Simulator")
    screen = pygame.display.set_mode((800, 600)) 
    clock = pygame.time.Clock()
    
    // Initialize all necessary objects
    sidebar = SidebarMenu()
    bin = Bin()
    logic_gates = []
    sockets = []
    wires = []
    switch = Switch()
    info_button = InfoButton()
    info_menu = InfoMenu()
    db_manager = DatabaseManager()

    // The main loop
    while running == True:
        for event in pygame.event.get():
            // Checks if the program was quit
            if event.type == pygame.QUIT:
                running = False
            else:
                dragAndDrop()

        WIN.fill(WHITE)
        // Draw the sidebar menu, bin, switch, and info button
        SidebarMenu.draw(screen)
        bin.draw(screen)
        switch.draw(screen)
        InformationMenu.draw(screen)
        
        // Draw each logic gate and its sockets
        for gate in logic_gates:
            gate.draw(screen)

        pygame.display.update()
    
}

main()